var searchIndex = {};
searchIndex['rust-bt-util'] = {"items":[],"paths":[]};
searchIndex['rust-bt'] = {"items":[[0,"","rust-bt","This crate provides functionality required to go from simply having a torrent\nfile, to reading that file, to contacting the appropriate trackers, to setting \nup port forwards if necessary, and finally, participating in the piece trading \nphase and verification of the complete file.\n \nDocumentation is still in progress and is very segmented. Some of the documentation\nis near completion (ex: upnp module) and some of it is non existent (ex: bencode module)."],[0,"bencode","",""],[2,"Bencode","rust-bt::bencode","Structure representing bencoded data."],[12,"Int","","",0],[12,"Bytes","","",0],[12,"List","","",0],[12,"Dict","","",0],[10,"fmt","","",0],[10,"new","","Processes bytes as bencoded data and builds a Bencode structure to represent\nthe bencoded bytes.",0],[10,"encoded","","Serializes the Bencode data structure back into a sequence of bytes.",0],[10,"int","","Tries to convert the current Bencode value to an i64.",0],[10,"bytes","","Tries to convert the current Bencode value to a sequence of bytes.",0],[10,"str","","Tries to convert the current Bencode value to a str (only valid UTF-8\nbyte sequences are convertible).",0],[10,"list","","Tries to convert the current Bencode value to a list of Bencoded values.",0],[10,"dict","","Tries to convert the current Bencode value to a dictionary of Bencoded\nvalues.",0],[0,"error","rust-bt",""],[1,"ParseError","rust-bt::error","Used when parsing external data that may have errors at any position within\nthe buffer."],[11,"pos","","",1],[11,"desc","","",1],[11,"detail","","",1],[1,"TorrError","","Used to raise an error when a piece of data required by the Torrent is\nmissing from the Bencode data."],[11,"kind","","",2],[11,"desc","","",2],[11,"detail","","",2],[2,"TorrErrorKind","","A list specifying the types of TorrErrors that may occur."],[12,"MissingKey","","A key is missing in one of the bencoded dictionaries.",3],[12,"WrongType","","The data type of one of the bencoded values is wrong.",3],[12,"Other","","An error occurred that is not in this list.",3],[4,"ParseResult","",""],[4,"TorrResult","",""],[10,"fmt","","",1],[10,"new","","Constructs a new ParseError object where the pos information will get\nembedded within the detail value so that it is preserved when accessing\nmethods via Error or when converting to another error.",1],[10,"from_error","","",1],[10,"description","","",1],[10,"detail","","",1],[10,"cause","","",1],[10,"fmt","","",3],[10,"fmt","","",2],[10,"from_error","","",2],[10,"description","","",2],[10,"detail","","",2],[10,"cause","","",2],[0,"torrent","rust-bt",""],[1,"Torrent","rust-bt::torrent","A type representing a valid torrent file."],[1,"TorrFile","","Used to represent a file within a torrent file."],[2,"TorrFileType","","Used to represent the type of torrent file."],[12,"Single","","",4],[12,"Multi","","",4],[10,"new","","Goes through the Bencode object and pulls out the fields required by a\nvalid torrent file. Any extraneous fields that may be present within\nthe Bencode object are ignored and will not be considered an error.",5],[10,"announce","","Returns the url of the main tracker for the current torrent file.",5],[10,"announce_list","","Optionally returns a list of urls pointing to backup trackers for the\ncurrent torrent file.",5],[10,"comment","","Optionally returns any comment within the current torrent file.",5],[10,"created_by","","Optionally returns the created by tag within the current torrent file.",5],[10,"creation_date","","Optionally returns the creation date of the current torrent file in\nstandard UNIX epoch format.",5],[10,"file_type","","Returns a tuple of the type of torrent file as well as the associated name.\nSee below for what the second tuple value represents:",5],[10,"files","","Returns a list of file objects for the current torrent.",5],[10,"piece_length","","Returns the piece length for each file.",5],[10,"pieces","","Returns the pieces byte array for the current torrent.",5],[10,"fmt","","",4],[10,"length","","Returns the total number of bytes in the current file.",6],[10,"file_sum","","Optionally returns the md5sum of the current file.",6],[10,"path","","Optionally returns a list of str values that correspond to directories\nexcept for the last value which is the filename for the current file.",6],[0,"tracker","rust-bt",""],[1,"ScrapeInfo","rust-bt::tracker",""],[11,"leechers","","",7],[11,"seeders","","",7],[11,"downloads","","",7],[1,"AnnounceInfo","",""],[11,"interval","","",8],[11,"leechers","","",8],[11,"seeders","","",8],[11,"peers","","",8],[6,"Tracker","",""],[9,"local_ip","","Returns the local ip address that is being used to communicate with the tracker.",9],[9,"scrape","","Returns information about the swarm for a particular torrent file without\njoining the swarm.",9],[9,"start_announce","","Sends an announce request to the tracker signalling a start event. This request\nenters us into the swarm and we are required to send periodic updates as \nspecified by the tracker in order to be kept in the swarm. Periodic updates \nshould be sent with update_announce.",9],[9,"update_announce","","Sends an announce request to the tracker signalling an update event. This request\nacts as a heartbeat so that the tracker knows we are still connected and wanting\nto be kept in the swarm.",9],[9,"stop_announce","","Sends an announce request to the tracker signalling a stop event. This request\nexists to let the tracker know that we are gracefully shutting down and that\nit should remove us from the swarm.",9],[9,"complete_announce","","Sends an announce request to the tracker signalling a completed event. This request\nexists to let the tracker know that we have completed our download TEST TO CHECK\nWHAT EXACTLY THIS MAKES THE TRACKER DO.",9],[0,"tracker_udp","rust-bt",""],[1,"UdpTracker","rust-bt::tracker_udp",""],[10,"new","","Creates a new UdpTracker object.",10],[10,"local_ip","","",10],[10,"scrape","","",10],[10,"start_announce","","",10],[10,"update_announce","","",10],[10,"stop_announce","","",10],[10,"complete_announce","","",10],[0,"upnp","rust-bt",""],[1,"ServiceDesc","rust-bt::upnp","Type used to represent a service description. Service actions can be viewed\nas well as related in and out parameters and service state variables."],[2,"UPnPIntf","","Type used to represent different interfaces available on a network as defined\nby the UPnP specification. This type can be used to get very general information\nabout an interface but also to get access to the services exposed by the interface."],[4,"StrPos","","A tuple consisting of start and end position."],[10,"actions","","Returns a list of string slices corresponding to each action that can be\nsent to this service. The slice includes the action name, and any in or out\nparameters expected/provided as well as their related state variables. The \n\"relatedStateVariable\" corresponds to an entry in the \"serviceStateTable\".",11],[10,"state_variables","","Optionally returns a string slice corresponding to the \"serviceStateTable\"\nof the service description. This table explains the data types referenced\nin the \"relatedStateVariable\" field for each in or out parameters for each\naction.",11],[10,"send_action","","Takes an action string representing the procedure to call as well as an\narray slice of tuples in the form (arg_name, arg_value). An empty array \nslice indicates that no parameters are expected for the specified action.",11],[10,"find_all","","Sends out a search request for all UPnP interfaces on the specified from_addr.",12],[10,"find_services","","Sends out a search request for particular UPnP services on the specified from_addr.",12],[10,"find_devices","","Sends out a search request for particular UPnP devices on the specified from_addr.",12],[10,"find_uuid","","Sends out a search request for a unique UPnP interface on the specified from_addr.",12],[10,"is_root","","Check if the current UPnPIntf represents a root device on the network.",12],[10,"is_device","","Check if the current UPnPIntf represents a device on the network.",12],[10,"is_service","","Check if the current UPnPIntf represents a service on the network.",12],[10,"is_identifier","","Check if the current UPnPIntf represents an identifier (uuid) on the network.",12],[10,"name","","Get the device name, service specification, or uuid that this interface\nhas identified itself with.",12],[10,"version","","Get the device version, service version, or no version (in the case of an\nidentifier or root) that this interface has identified itself with.",12],[10,"location","","Get the location (url) of the root device description web page corresponding\nto this particular UPnPIntf.",12],[10,"st","","Get the search target of this UPnPIntf.",12],[10,"usn","","Get the full Unique Service Name of this UPnPIntf.",12],[10,"service_desc","","Get a service description object for this service.",12],[0,"util","rust-bt",""],[2,"Transport","rust-bt::util",""],[12,"TCP","","",13],[12,"UDP","","",13],[12,"HTTP","","",13],[3,"get_net_addrs","","Returns a list of all local IPv4 Addresses."],[3,"get_udp_sock","","Attempts to open a udp connection on addr.\n \nIf the connection is unsuccessful, it will try again up to (attempts - 1)\ntimes, incrementing the port for each attempt."],[3,"get_udp_wait","","The standard wait algorithm defined in the UDP Tracker Protocol. Returned value\nis in seconds."],[3,"gen_peer_id","","Generates a peer id from a base identifier followed by random characters."],[3,"get_transport","","Takes a url and returns the transport type that it specifies."],[3,"get_sockaddr","","Returns the first found DNS entry as a SocketAddr for the specified url."],[3,"get_path","","Returns the path portion of a supplied url."],[3,"get_error","","Used to fill an IoError with a kind and desc, leaving detail empty."]],"paths":[[2,"Bencode"],[1,"ParseError"],[1,"TorrError"],[2,"TorrErrorKind"],[2,"TorrFileType"],[1,"Torrent"],[1,"TorrFile"],[1,"ScrapeInfo"],[1,"AnnounceInfo"],[6,"Tracker"],[1,"UdpTracker"],[1,"ServiceDesc"],[2,"UPnPIntf"],[2,"Transport"]]};

initSearch(searchIndex);
